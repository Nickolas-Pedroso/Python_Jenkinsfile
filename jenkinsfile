pipeline {
    agent any

    environment {
        // Vari√°veis de ambiente para padroniza√ß√£o
        IMAGE_NAME = "projeto_app" // Nome da imagem Docker que ser√° constru√≠da
        CONTAINER_NAME = "projeto-app-runner" // Nome do container de deploy
        APP_PORT = "8080" // Porta da sua aplica√ß√£o
    }

    stages {
        stage('Checkout') {
            steps {
                echo "‚¨áÔ∏è Checking out code from GitHub..."
                // Usa a credencial configurada 'github-token'
                git branch: 'master',
                    url: 'https://github.com/Nickolas-Pedroso/Python_Jenkinsfile.git',
                    credentialsId: 'github-token'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üì¶ Building Docker image: ${IMAGE_NAME}"
                // Substitu√≠do 'docker-compose build' por 'docker build'
                // O ponto final ( . ) indica que o Dockerfile est√° na raiz do projeto.
                sh "docker build -t ${IMAGE_NAME}:latest ." 
            }
        }

        stage('Run Tests') {
            steps {
                echo "üß™ Running tests inside container..."
                // Roda a imagem em modo tempor√°rio para executar os testes
                // O nome do seu arquivo de teste deve ser 'test_app.py'
                // O '|| true' garante que mesmo que os testes falhem (c√≥digo 1), 
                // o est√°gio Jenkins n√£o falhe imediatamente (pode ser ajustado se preferir falha imediata)
                sh "docker run --rm ${IMAGE_NAME}:latest pytest test_app.py || true"
            }
        }

        stage('Deploy') {
            steps {
                echo "üöÄ Starting new container deploy..."
                
                // 1. Para e remove containers antigos (se existirem)
                sh "docker rm -f ${CONTAINER_NAME} || true"
                
                // 2. Cria e sobe o novo container em background (-d)
                // Substitu√≠do 'docker-compose up' por 'docker run'
                sh """
                docker run -d \
                  --name ${CONTAINER_NAME} \
                  -p ${APP_PORT}:${APP_PORT} \
                  --restart unless-stopped \
                  ${IMAGE_NAME}:latest
                """
                echo "‚úÖ Aplica√ß√£o iniciada em: http://localhost:${APP_PORT}"
            }
        }
    }

    post {
        always {
            echo 'Pipeline finalizado!'
        }
        failure {
            echo 'Falhou üò¢. Verifique os logs detalhados acima.'
        }
        success {
            echo 'Deploy conclu√≠do com sucesso üöÄ'
        }
    }
}