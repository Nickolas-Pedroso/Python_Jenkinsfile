pipeline {
    agent any

    environment {
        // Variáveis de ambiente para padronização
        IMAGE_NAME = "projeto_app" // Nome da imagem Docker que será construída
        CONTAINER_NAME = "projeto-app-runner" // Nome do container de deploy
        APP_PORT = "8080" // Porta da sua aplicação
    }

    stages {
        
        stage('Checkout') {
            steps {
                echo "⬇️ Checking out code from GitHub..."
                // Certifique-se de que 'github-token' é o ID da credencial que funciona.
                git branch: 'master',
                    url: 'https://github.com/Nickolas-Pedroso/Python_Jenkinsfile.git',
                    credentialsId: 'github-token'
            }
        }

        stage('Build Docker Image') {
            // Usamos 'agent any' para executar o build no workspace principal
            agent any 
            steps {
                echo "📦 Building Docker image: ${IMAGE_NAME} usando app/Dockerfile"
                
                // Tenta instalar o cliente Docker (necessário se a imagem Jenkins for base)
                sh '''
                    # Verifica se o comando docker existe; se não, tenta instalar.
                    if ! command -v docker >/dev/null 2>&1; then
                        echo "Docker client não encontrado. Tentando instalar..."
                        apt-get update -y && apt-get install -y docker.io
                    fi
                    
                    # Comando de Build
                    docker build -t ${IMAGE_NAME}:latest -f app/Dockerfile .
                '''
            }
        }

        stage('Run Tests') {
            agent any 
            steps {
                echo "🧪 Running tests inside container..."
                // Roda a imagem em modo temporário para executar os testes
                // O '|| true' garante que o pipeline não falhe mesmo se os testes falharem (Comportamento de teste comum)
                sh "docker run --rm ${IMAGE_NAME}:latest pytest app/teste.py || true"
            }
        }

        stage('Deploy') {
            agent any 
            steps {
                echo "🚀 Starting new container deploy..."
                
                // 1. Para e remove containers antigos (se existirem)
                sh "docker rm -f ${CONTAINER_NAME} || true"
                
                // 2. Cria e sobe o novo container em background (-d)
                sh """
                docker run -d \\
                  --name ${CONTAINER_NAME} \\
                  -p ${APP_PORT}:${APP_PORT} \\
                  --restart unless-stopped \\
                  ${IMAGE_NAME}:latest
                """
                echo "✅ Aplicação iniciada em: http://localhost:${APP_PORT}"
            }
        }
    }

    post {
        always {
            echo 'Pipeline finalizado!'
        }
        failure {
            echo 'Falhou 😢. Verifique os logs detalhados acima.'
        }
        success {
            echo 'Deploy concluído com sucesso 🚀'
        }
    }
}

